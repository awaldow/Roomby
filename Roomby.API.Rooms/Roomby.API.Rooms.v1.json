{
  "openapi": "3.0.1",
  "info": {
    "title": "Roomby Rooms API",
    "description": "API for Roomby Rooms - Test",
    "contact": {
      "name": "Addison Waldow",
      "email": "a.wal.bear@gmail.com"
    },
    "version": "1"
  },
  "paths": {
    "/api/v1/Room/{householdId}": {
      "get": {
        "tags": [
          "Room"
        ],
        "summary": "GetRoomsForHouseholdAsync(Guid householdId)",
        "description": "Returns a list of Rooms (sorted by name) for a given Household ID",
        "operationId": "GetRoomsForHouseholdAsync",
        "parameters": [
          {
            "name": "householdId",
            "in": "path",
            "description": "The Household ID to return a list of Rooms for",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The Household ID to return a list of Rooms for",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Room"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/Room/{roomId}": {
      "get": {
        "tags": [
          "Room"
        ],
        "summary": "GetRoomAsync(Guid roomId)",
        "description": "Returns the Room object for roomId",
        "operationId": "GetRoomAsync",
        "parameters": [
          {
            "name": "roomId",
            "in": "path",
            "description": "Room ID for the Room to get",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Room ID for the Room to get",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Room"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Room"
        ],
        "summary": "UpdateRoomAsync(Guid roomId, [FromBody] Room roomToUpdate)",
        "description": "Updates the Room roomId with the values from roomToUpdate if it exists; if roomId\r\nis omitted, a new Room will be created instead.",
        "operationId": "UpdateRoom",
        "parameters": [
          {
            "name": "roomId",
            "in": "path",
            "description": "Guid ID for the Room to update",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Guid ID for the Room to update",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Room object with the request changes filled in",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Room"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Room"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Room"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Room"
        ],
        "summary": "DeleteRoomAsync(Guid roomId)",
        "description": "Deletes the Room with the given roomId",
        "operationId": "DeleteRoom",
        "parameters": [
          {
            "name": "roomId",
            "in": "path",
            "description": "Room ID for the Room to delete",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Room ID for the Room to delete",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v1/Room": {
      "post": {
        "tags": [
          "Room"
        ],
        "summary": "CreateRoomAsync(Room roomToCreate)",
        "description": "Creates the provided roomToCreate",
        "operationId": "CreateRoomAsync",
        "requestBody": {
          "description": "A Room object. See !:Roomby.API.Rooms.Mediators.CreateRoomValidator for validation information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Room"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Room"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "householdId": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time"
          },
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "identity": {
            "type": "string",
            "nullable": true
          },
          "provider": {
            "type": "string",
            "nullable": true
          },
          "subscriptionId": {
            "type": "string",
            "nullable": true
          },
          "household": {
            "$ref": "#/components/schemas/Household"
          }
        },
        "additionalProperties": false
      },
      "Household": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "headOfHouseholdId": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time"
          },
          "headOfHousehold": {
            "$ref": "#/components/schemas/User"
          }
        },
        "additionalProperties": false
      },
      "Room": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time"
          },
          "householdId": {
            "type": "string",
            "format": "uuid"
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "purchaseTotal": {
            "type": "number",
            "format": "double"
          },
          "boughtTotal": {
            "type": "number",
            "format": "double"
          },
          "household": {
            "$ref": "#/components/schemas/Household"
          }
        },
        "additionalProperties": false
      }
    }
  }
}