name: Roomby.API.Shared-$(Date:yyyyMMdd)$(Rev:.r)
trigger:
  branches:
    include:
    - master

variables:
- name: terraformTestPath
  value: 'terraform/test/shared/'
- name: terraformProdPath
  value: 'terraform/prod/shared/'
- name: testSubscription
  value: 'Visual Studio Enterprise'
- name: prodSubscription
  value: 'Visual Studio Enterprise'

stages:
- stage: 'Provision'
  displayName: 'Provision the environments using terraform'
  jobs:
  - job: 'Provision_Test'
    displayName: 'Provision Test infrastructure'
    variables:
      - group: Roomby Shared Terraform Test Backend Config
    pool:
      vmImage: 'windows-2019'
    steps:
      - download: current
        artifact: terraformtest

      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
        inputs:
          terraformVersion: '0.13.6'
        displayName: Install Terraform

      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
        displayName: 'Terraform init'
        inputs:
          command: init
          backendServiceArm: $(testSubscription)
          backendAzureRmResourceGroupName: '$(backendResourceGroup)'
          backendAzureRmStorageAccountName: $(backendStorageAccountName)
          backendAzureRmContainerName: $(backendContainerName)
          backendAzureRmKey: $(backendKeyFile)
          workingDirectory: '$(terraformTestPath)'
          
      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
        inputs:
          command: plan
          environmentServiceNameAzureRM: $(testSubscription)
          commandOptions: -out=terraform.plan -var "resource_group_location=$(resourceGroupLocation)" -var "sql_server_admin=$(sqlServerAdmin)" -var "sql_server_admin_pass=$(sqlServerAdminPass)"
          workingDirectory: '$(terraformTestPath)'
        displayName: Terraform Plan

      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
        name: terraformApply
        inputs:
          command: apply
          environmentServiceNameAzureRM: $(testSubscription)
          commandOptions: terraform.plan
          workingDirectory: '$(terraformTestPath)'
        displayName: Terraform Apply

      - powershell: |
          $terraformOutput = Get-Content "$(terraformApply.jsonOutputVariablesPath)" | ConvertFrom-Json
          $terraformOutput | Get-Member -MemberType NoteProperty | % { $o = $terraformOutput.($_.Name); Write-Host "##vso[task.setvariable variable=$($_.Name);isoutput=true;issecret=$($o.sensitive)]$($o.value)" }
        name: terraformOutput
        displayName: Read terraform outputs