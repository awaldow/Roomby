name: Roomby.API.Users-$(Date:yyyyMMdd)$(Rev:.r)
trigger:
  branches:
    include:
    - master
  paths:
    include:
    - Roomby.API.Users

variables:
- name: buildConfiguration
  value: 'Release'
- name: projectPath
  value: '**/Roomby.API.Users.csproj'
- name: testProjectPath
  value: '**/Roomby.API.Users.[Tt]ests/*.csproj'
- name: terraformTestPath
  value: 'terraform/test/users/'
- name: terraformProdPath
  value: 'terraform/prod/users/'
- name: testSubscription
  value: 'Visual Studio Enterprise'
- name: prodSubscription
  value: 'Visual Studio Enterprise'

stages:
- stage: 'Build'
  displayName: 'Build the API'
  jobs: 
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'windows-2019'
      demands:
      - npm

    steps:
    - task: NuGetToolInstaller@0
      displayName: 'Use NuGet 4.4.1'
      inputs:
        versionSpec: 4.4.1
    
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk 3.1.404'
      inputs:
        version: 3.1.404
    
    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore'
      inputs:
        command: restore
        projects: '$(projectPath)'
    
    - task: DotNetCoreCLI@2
      displayName: 'dotnet build'
      inputs:
        projects: '$(projectPath)'
        arguments: '--configuration $(buildConfiguration)'
    
    - task: DotNetCoreCLI@2
      displayName: 'dotnet test'
      inputs:
        command: test
        projects: '$(testProjectPath)'
        arguments: '--configuration $(buildConfiguration)'
    
    - task: DotNetCoreCLI@2
      displayName: 'dotnet publish'
      inputs:
        command: publish
        publishWebProjects: false
        projects: '$(projectPath)'
        arguments: '--configuration $(buildConfiguration) --output $(build.artifactstagingdirectory)'
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: Terraform test'
      inputs:
        PathToPublish: '$(terraformTestPath)'
        ArtifactName: terraformtest

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: Terraform prod'
      inputs:
        PathToPublish: '$(terraformProdPath)'
        ArtifactName: terraformprod

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: code'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        ArtifactName: code
      condition: succeededOrFailed()

- stage: 'Deploy'
  dependsOn: Build
  displayName: 'Deploy the API'
  condition: eq(1,2)
  jobs:
  - job: 'Provision_Test'
    displayName: 'Provision Test infrastructure'
    variables:
      - group: Roomby Rooms Terraform Test Backend Config
    pool:
      vmImage: 'windows-2019'
    steps:
      - download: current
        artifact: drop

      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
        inputs:
          terraformVersion: '0.12.12'
        displayName: Install Terraform

      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
        displayName: 'Terraform init'
        inputs:
          command: init
          backendServiceArm: 'Visual Studio Enterprise'
          backendAzureRmResourceGroupName: '$(backendResourceGroup)'
          backendAzureRmStorageAccountName: $(backendStorageAccountName)
          backendAzureRmContainerName: $(backendContainerName)
          backendAzureRmKey: $(backendKeyFile)
          workingDirectory: '$(Pipeline.Workspace)/terraform'

      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
        inputs:
          command: plan
          environmentServiceNameAzureRM: 'Visual Studio Enterprise'
          commandOptions: -out=terraform.plan
        displayName: Terraform Plan

      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
        name: terraformApply
        inputs:
          command: apply
          environmentServiceNameAzureRM: 'Visual Studio Enterprise'
          commandOptions: terraform.plan
        displayName: Terraform Apply

      - powershell: |
          $terraformOutput = Get-Content "$(terraformApply.jsonOutputVariablesPath)" | ConvertFrom-Json
          $terraformOutput | Get-Member -MemberType NoteProperty | % { $o = $terraformOutput.($_.Name); Write-Host "##vso[task.setvariable variable=$($_.Name);isoutput=true;issecret=$($o.sensitive)]$($o.value)" }
        name: terraformOutput
        displayName: Read terraform outputs
  - deployment: Test
    displayName: 'Test'
    environment: test
    variables:
    - group: Roomby Users API Secrets Test
    - name: ApplicationInsights.ConnectionString
      value: $(ApplicationInsights--ConnectionString)
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureRmWebAppDeployment@4
            displayName: 'Azure App Service Deploy: app-roomby-users-test'
            inputs:
              azureSubscription: '$(testSubscription)'
              appType: webApp 
              WebAppName: $(terraformOutput.users_app_service_name)
              ResourceGroupName: $(terraformOutput.resource_group)
              packageForLinux: '$(Pipeline.Workspace)\code\*.zip'
              
  - deployment: Prod
    displayName: 'Prod'
    environment: production
    variables:
      - group: Roomby Users API Secrets Prod
      - name: ApplicationInsights.ConnectionString
        value: $(ApplicationInsights--ConnectionString)
    dependsOn: Test
    condition: eq(1,2)
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureRmWebAppDeployment@4
            displayName: 'Azure App Service Deploy: app-roomby-users-prod staging slot'
            inputs:
              azureSubscription: '$(prodSubscription)'
              WebAppName: app-roomby-users
              appType: webApp 
              deployToSlotOrASE: true
              ResourceGroupName: rg-roomby
              SlotName: app-roomby-users-staging
              packageForLinux: '$(Pipeline.Workspace)\code\*.zip'
          - task: AzureAppServiceManage@0
            displayName: 'Swap Slots: app-roomby-users-prod'
            inputs:
              azureSubscription: '$(prodSubscription)'
              WebAppName: app-roomby-users
              action: 'Swap Slots'
              ResourceGroupName: rg-roomby
              SourceSlot: app-roomby-users-staging
              SwapWithProduction: true
          